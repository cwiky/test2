

import requests
import pandas as pd
import numpy as np
import json
import os
import sys
import re
import datetime
from WorkWeixinRobot.work_weixin_robot import WWXRobot
from requests.packages.urllib3.exceptions import InsecureRequestWarning

# 禁用安全请求警告
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)


# reload(sys)
# sys.setdefaultencoding('utf-8')


# 过滤HTML中的标签
# 将HTML中标签等信息去掉
# @param htmlstr HTML字符串.
def filter_tags(htmlstr):
    # 先过滤CDATA
    re_cdata = re.compile('//<!\[CDATA\[[^>]*//\]\]>', re.I)  # 匹配CDATA
    re_script = re.compile('<\s*script[^>]*>[^<]*<\s*/\s*script\s*>', re.I)  # Script
    re_style = re.compile('<\s*style[^>]*>[^<]*<\s*/\s*style\s*>', re.I)  # style
    re_br = re.compile('<br\s*?/?>')  # 处理换行
    re_h = re.compile('</?\w+[^>]*>')  # HTML标签
    re_comment = re.compile('<!--[^>]*-->')  # HTML注释
    s = re_cdata.sub('', htmlstr)  # 去掉CDATA
    s = re_script.sub('', s)  # 去掉SCRIPT
    s = re_style.sub('', s)  # 去掉style
    s = re_br.sub('\n', s)  # 将br转换为换行
    s = re_h.sub('', s)  # 去掉HTML 标签
    s = re_comment.sub('', s)  # 去掉HTML注释
    # 去掉多余的空行
    blank_line = re.compile('\n+')
    s = blank_line.sub('\n', s)
    s = replaceCharEntity(s)  # 替换实体
    return s


##替换常用HTML字符实体.
# 使用正常的字符替换HTML中特殊的字符实体.
# 你可以添加新的实体字符到CHAR_ENTITIES中,处理更多HTML字符实体.
# @param htmlstr HTML字符串.
def replaceCharEntity(htmlstr):
    CHAR_ENTITIES = {'nbsp': ' ', '160': ' ',
                     'lt': '<', '60': '<',
                     'gt': '>', '62': '>',
                     'amp': '&', '38': '&',
                     'quot': '"', '34': '"', }

    re_charEntity = re.compile(r'&#?(?P<name>\w+);')
    sz = re_charEntity.search(htmlstr)
    while sz:
        entity = sz.group()  # entity全称，如&gt;
        key = sz.group('name')  # 去除&;后entity,如&gt;为gt
        try:
            htmlstr = re_charEntity.sub(CHAR_ENTITIES[key], htmlstr, 1)
            sz = re_charEntity.search(htmlstr)
        except KeyError:
            # 以空串代替
            htmlstr = re_charEntity.sub('', htmlstr, 1)
            sz = re_charEntity.search(htmlstr)
    return htmlstr


def repalce(s, re_exp, repl_string):
    return re_exp.sub(repl_string, s)



    url = str(urls)
    requests.DEFAULT_RETRIES = 5  # 增加重试连接次数
    s = requests.session()
    s.keep_alive = False  # 关闭多余连接
    response = requests.post(url, data=json.dumps(data), headers=headers, verify=False, timeout=300)
    response.encoding = "utf-8"  # 设置接收编码格式
    html = response.json()

    return html


# 处理【文件审计日志】页面查询的结果
def fileResult(re):
    df = pd.DataFrame(
        columns=['user', 'group', 'time', 'ip', 'filepath', 'filename', 'tool', 'filetype', 'filesize', 'im', 'sender',
                 'receiver',
                 'remark'])
    tmp = pd.DataFrame(columns=['user', 'time'])
    data = re['data']
    kb = 1024
    mb = kb * 1024
    gb = mb * 1024
    for i in range(len(data)):
        tmp.loc[i] = [data[i]['user'], data[i]['date_time']]
        if data[i]['filetype'].find(u"图片") < 0 and data[i]['app_name'].find(u"企业微信") < 0:
            user = data[i]['user']
            group = data[i]['group']
            time = data[i]['date_time']
            ip = data[i]['hst_ip']
            try:
                filepath = data[i]['filename']
                (tempfilepath, filename) = os.path.split(filepath)
            except:
                filepath = ''
                filename = ''
            # 区分filepath和filename
            tool = data[i]['app_name']
            filetype = data[i]['filetype']
            try:
                size = int(data[i]['filesize'])
                if size >= gb:
                    filesize = "%.1f GB" % float(size / gb)
                elif size >= mb:
                    filesize = "%.1f MB" % float(size / mb)
                elif size >= kb:
                    filesize = "%.1f KB" % float(size / kb)
                else:
                    filesize = "%.1f B" % float(size / 1)
            except:
                filesize = '0 B'
            im = data[i]['loginfo']['details_more'][0]['val']
            sender = data[i]['loginfo']['details_more'][1]['val']
            receiver = data[i]['loginfo']['details_more'][2]['val']
            if im == receiver:
                remark = u'接收'
            else:
                remark = u'发送'
            # print user, time, filepath, filename, tool, im, sender, receiver
            df.loc[i] = [user, group, time, ip, filepath, filename, tool, filetype, filesize, im, sender, receiver,
                         remark]
    print(tmp)

    return df, tmp


# 获取文件外发最后的结果
def getfileResult(cookie, url_file, n):
    # sheet1是全量发送和接收的文件，sheet2是发送文件的数量统计
    sheet1 = pd.DataFrame(
        columns=['user', 'group', 'time', 'ip', 'filepath', 'filename', 'tool', 'filetype', 'filesize', 'im', 'sender',
                 'receiver',
                 'remark'])
    sheet2 = pd.DataFrame(columns=['user', 'filenum'])
    for i in range(n):
        re = getall(cookie, url_file, i)
        allfile, tmp = fileResult(re)
        sheet1 = sheet1.append(allfile)
        if tmp.shape[0] < 1:
            break

    # filenum = allfile[allfile['remark'].isin([u'发送'])].shape[0]

    with pd.ExcelWriter('result.xlsx') as writer:
        # sheet2.to_excel(writer, sheet_name=u'结果统计', index=False)
        sheet1.to_excel(writer, sheet_name=u'文件外发', index=False)
        pass


# 处理【邮件收发日志】页面查询的结果
def mailResult(re):
    df1 = pd.DataFrame(
        columns=['user', 'group', 'time', 'ip', 'mail_from', 'mail_to', 'mail_title', 'body', 'app_name', 'filecount',
                 'filename'])
    df2 = pd.DataFrame(
        columns=['user', 'group', 'time', 'ip', 'mail_from', 'mail_to', 'mail_title', 'body', 'app_name', 'filecount',
                 'filename'])
    df3 = pd.DataFrame(
        columns=['user', 'group', 'time', 'ip', 'mail_from', 'mail_to', 'mail_title', 'body', 'app_name', 'filecount',
                 'filename'])
    data = re['data']
    for i in range(len(data)):
        # print data[i]['mail_title'], i
        # 排除企业邮箱发送的，全量邮件外发
        if data[i]['mail_from'].find('xsyxsc.com') < 0:
            user = data[i]['user']
            group = data[i]['group']
            time = data[i]['date_time']
            ip = data[i]['hst_ip']
            mail_from = data[i]['mail_from']
            mail_to = data[i]['mail_to']
            mail_title = data[i]['mail_title']
            body = filter_tags(data[i]['body'])
            app_name = data[i]['app_name']
            try:
                filecount = int(data[i]['filecount'])
            except:
                filecount = 0
            filename = ''
            if filecount > 0:
                for j in range(filecount):
                    attach = data[i]['loginfo']['attach_info'][j]['filename']
                    filename = filename + ';' + attach
            # print user, group, time, ip, mail_from, mail_to, mail_title, body, app_name, filecount, filename
            df1.loc[i] = [user, group, time, ip, mail_from, mail_to, mail_title, body, app_name, filecount, filename]

        # 离职风险
        if data[i]['mail_from'].find('xsyxsc.com') < 0 and (
                data[i]['mail_title'].find(u'聘') > -1 or data[i]['mail_title'].find(u'求职') > -1 or data[i][
            'mail_title'].find(u'简历') > -1):
            user = data[i]['user']
            group = data[i]['group']
            time = data[i]['date_time']
            ip = data[i]['hst_ip']
            mail_from = data[i]['mail_from']
            mail_to = data[i]['mail_to']
            mail_title = data[i]['mail_title']
            body = filter_tags(data[i]['body'])
            app_name = data[i]['app_name']
            filecount = int(data[i]['filecount'])
            filename = ''
            if filecount > 0:
                for j in range(filecount):
                    attach = data[i]['loginfo']['attach_info'][j]['filename']
                    filename = filename + ';' + attach
            df2.loc[i] = [user, group, time, ip, mail_from, mail_to, mail_title, body, app_name, filecount, filename]

            # 访谈风险
            if data[i]['mail_title'].find(u'咨询') > -1 or data[i]['mail_title'].find(u'访谈') > -1 or data[i][
                'mail_title'].find(u'接受') > -1 or data[i]['mail_title'].find(u'邀请') > -1:
                user = data[i]['user']
                group = data[i]['group']
                time = data[i]['date_time']
                ip = data[i]['hst_ip']
                mail_from = data[i]['mail_from']
                mail_to = data[i]['mail_to']
                mail_title = data[i]['mail_title']
                body = filter_tags(data[i]['body'])
                app_name = data[i]['app_name']
                filecount = int(data[i]['filecount'])
                filename = ''
                if filecount > 0:
                    for j in range(filecount):
                        attach = data[i]['loginfo']['attach_info'][j]['filename']
                        filename = filename + ';' + attach
                df3.loc[i] = [user, group, time, ip, mail_from, mail_to, mail_title, body, app_name, filecount,
                              filename]

    print(df1, df2, df3)

    return df1, df2, df3


# 获取邮件收发最后的结果
def getmailResult(cookie, url, n):
    #
    sheet1 = pd.DataFrame(
        columns=['user', 'group', 'time', 'ip', 'mail_from', 'mail_to', 'mail_title', 'body', 'app_name', 'filecount',
                 'filename'])
    sheet2 = pd.DataFrame(
        columns=['user', 'group', 'time', 'ip', 'mail_from', 'mail_to', 'mail_title', 'body', 'app_name', 'filecount',
                 'filename'])
    sheet3 = pd.DataFrame(
        columns=['user', 'group', 'time', 'ip', 'mail_from', 'mail_to', 'mail_title', 'body', 'app_name', 'filecount',
                 'filename'])
    for i in range(n):
        re = getall(cookie, url, i)
        df1, df2, df3 = mailResult(re)
        sheet1 = sheet1.append(df1)
        sheet2 = sheet2.append(df2)
        sheet3 = sheet3.append(df3)



# 处理【U盘及移动硬盘日志】
def usbResult(re):
    df = pd.DataFrame(
        columns=['user', 'group', 'pcname', 'time', 'ip', 'device', 'from_filepath', 'to_filepath', 'filename',
                 'action', 'filesize', 'UDiskId'])
    tmp = pd.DataFrame(columns=['user', 'time'])
    data = re['data']
    for i in range(len(data)):
        tmp.loc[i] = [data[i]['user'], data[i]['date_time']]
        if data[i]['disk_opr_desc'].find(u"拔出") < 0 and data[i]['disk_opr_desc'].find(u"插入") < 0 and data[i]['filename'].find('mov') < 0 and data[i]['filename'].find('mkv') < 0 and data[i]['filename'].find('MOV') < 0:
            type = data[i]['loginfo']['details_fix']['filetype']['val']
            if type.find(u'应用程序') < 0 and type.find(u'图片') < 0:
                user = data[i]['user']
                group = data[i]['group']
                pcname = data[i]['pc_name']
                time = data[i]['date_time']
                ip = data[i]['hst_ip']
                device = data[i]['disk_desc']
                try:
                    from_filepath = data[i]['loginfo']['details_more'][11]['val']
                except:
                    from_filepath = '-'
                try:
                    to_filepath = data[i]['loginfo']['details_more'][6]['val']
                except:
                    to_filepath = '-'
                filename = data[i]['filename']
                action = data[i]['disk_opr_desc']
                filesize = data[i]['filesize']
                UDiskId = data[i]['udisk_id']
                # print user, time, filepath, filename, tool, im, sender, receiver
                df.loc[i] = [user, group, pcname, time, ip, device, from_filepath, to_filepath, filename, action,
                             filesize, UDiskId]
    print(tmp)

    return df, tmp


# 获取USB拷贝最后的结果
def getusbResult(cookie, url, n):
    sheet1 = pd.DataFrame(
        columns=['user', 'group', 'pcname', 'time', 'ip', 'device', 'from_filepath', 'to_filepath', 'filename',
                 'action', 'filesize', 'UDiskId'])
    for i in range(n):
        re = getall(cookie, url, i)
        df1, tmp = usbResult(re)
        sheet1 = sheet1.append(df1)
        if tmp.shape[0] < 1:
            break

    # 发送告警通知到企业微信
    sendMessage(sheet1)

    with pd.ExcelWriter('result.xlsx') as writer:
        sheet1.to_excel(writer, sheet_name=u'USB拷贝', index=False)
        pass


def sendMessage(re):
    df = pd.DataFrame(columns=['rules', 'time', 'user', 'des', 'filename'])
    # 初始化一个机器人实例
    rbt = WWXRobot(key='d74703de-7a7f-4bec-8db7-20d5d6a23507')
    t = datetime.date.today() + datetime.timedelta(-1)
    content1 = ''
    i = 1
    if re.shape[0] > 0:
        for index, value in re.groupby(re['user']):
            value1 = value[value['action'] != '修改文件']
            value2 = value1.reset_index()
            if value2.shape[0] > 0:
                name = index
                group = value2['group'][0]
                action = '、'.join([str(e) for e in np.unique(value2['action'].values)])
                files = np.unique(value2['filename'].values)
                count = files.size
                if files.size <= 5:
                    filename = '\n'.join([str(e) for e in files])
                else:
                    files1 = files[0:5]
                    filename = '\n'.join([str(e) for e in files1])
                contenti = '\n告警' + str(i) + '\n[姓名] ' + name + '\n[部门] ' + group + '\n[文件数] ' + str(
                    count) + '\n[动作] ' + action + '\n[文件名(取前5份文件)]\n' + filename + '\n-----------------------'
                contentj = '[姓名] ' + name + '\n[部门] ' + group + '\n[文件数] ' + str(
                    count) + '\n[动作] ' + action + '\n[文件名(取前5份文件)]\n' + filename
                content1 = content1 + contenti
                i = i + 1
                df.loc[i] = ['USB拷贝', str(t).replace('-', ''), name, contentj, filename]
                print(contenti)
                rbt.send_markdown(content=contenti)
    else:
        content1 = '无告警'
    # content = list
    print(df)
    with pd.ExcelWriter('result1.xlsx') as writer:
        df.to_excel(writer, sheet_name=u'USB拷贝概况', index=False)
        pass

    content = '\n'.join(['# USB拷贝告警']) + '\n时间范围：' + str(t) + '\n告警数：' + str(i-1)
    print(content)
    rbt.send_markdown(content=content)


if __name__ == "__main__":
  
    n = 600  # 页数

    # 【文件审计日志】
    # getfileResult(cookie, url, n)
    # 【邮件收发日志】
    # getmailResult(cookie, url, n)
    # 【U盘及移动硬盘日志】
    getusbResult(cookie, url, n)
